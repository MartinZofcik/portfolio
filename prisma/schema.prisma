generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Plant {
  id                String      @id @default(uuid())
  latin_name        String
  slovak_name       String?
  trefle_name       String?
  size              Size
  description       String?
  recommended_place String?
  is_favorite       Boolean?    @default(false)
  last_watered      DateTime?
  last_fertilized   DateTime?

  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt

  ownerId           String
  // owner             User        @relation(fields: [ownerId], references: [id])
}

enum Size {
  VERY_SMALL
  SMALL
  MEDIUM
  LARGE
  VERY_LARGE
}




// // =============================================== NEXT AUTH
//
// model User {
//   id            String            @id @default(cuid())
//   name          String?
//   email         String            @unique
//   emailVerified DateTime?
//   image         String?
//   accounts      Account[]
//   sessions      Session[]
//   Authenticator Authenticator[]
//   createdAt     DateTime          @default(now())
//   updatedAt     DateTime          @updatedAt
//
//   // plants        Plant[]
// }
//
// model Account {
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String?
//   access_token      String?
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String?
//   session_state     String?
//
//   createdAt         DateTime    @default(now())
//   updatedAt         DateTime    @updatedAt
//
//   user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
//
//   @@id([provider, providerAccountId])
// }
//
// model Session {
//   sessionToken String       @unique
//   userId       String
//   expires      DateTime
//   user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
//
//   createdAt    DateTime     @default(now())
//   updatedAt    DateTime     @updatedAt
// }
//
// model VerificationToken {
//   identifier String
//   token      String
//   expires    DateTime
//
//   @@id([identifier, token])
// }
//
// model Authenticator {
//   id                   String   @id @default(cuid())
//   credentialID         String   @unique
//   userId               String
//   providerAccountId    String
//   credentialPublicKey  String
//   counter              Int
//   credentialDeviceType String
//   credentialBackedUp   Boolean
//   transports           String?
//
//   user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }
